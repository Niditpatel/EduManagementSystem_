{"version":3,"file":"static/js/335.4f3dd8bd.chunk.js","mappings":"4VAEO,SAAeA,EAAO,GAAD,+BAO3B,8CAPM,WAAsBC,GAAS,qGAEhBC,EAAAA,EAAAA,KAAe,UAAWD,GAAM,KAAD,EAAxC,OAAHE,EAAG,yBACFA,EAAIF,MAAI,yDAER,KAAMG,SAASH,MAAI,0DAE7B,sBAEM,SAAeI,EAAM,GAAD,+BAO1B,8CAPM,WAAqBJ,GAAS,qGAEfC,EAAAA,EAAAA,KAAe,SAAUD,GAAM,KAAD,EAAvC,OAAHE,EAAG,yBACFA,EAAIF,MAAI,yDAER,KAAMG,SAASH,MAAI,0DAE7B,sBAEM,SAAeK,EAAe,GAAD,+BAOnC,8CAPM,WAA8BL,GAAS,qGAExBC,EAAAA,EAAAA,KAAe,kBAAmBD,GAAM,KAAD,EAAhD,OAAHE,EAAG,yBACFA,EAAIF,MAAI,yDAER,KAAMG,SAASH,MAAI,0DAE7B,sBAEM,SAAeM,EAAsB,GAAD,+BAO1C,8CAPM,WAAqCN,GAAS,qGAE/BC,EAAAA,EAAAA,KAAe,iBAAkBD,GAAM,KAAD,EAA/C,OAAHE,EAAG,yBACFA,EAAIF,MAAI,yDAER,KAAMG,SAASH,MAAI,0DAE7B,sBAEM,SAAeO,EAAc,GAAD,+BAOlC,8CAPM,WAA6BP,GAAS,qGAEvBC,EAAAA,EAAAA,KAAe,iBAAkBD,GAAM,KAAD,EAA/C,OAAHE,EAAG,yBACFA,EAAIF,MAAI,yDAER,KAAMG,SAASH,MAAI,0DAE7B,sBAEM,SAAeQ,EAAc,GAAD,+BAalC,8CAbM,WAA6BC,GAAU,qGAExBR,EAAAA,EAAAA,IAAc,UAAW,CACzCS,QAAS,CACPC,cAAeF,EACfG,OAAQ,mBACR,eAAgB,sBAEjB,KAAD,EANO,OAAHV,EAAG,yBAOFA,EAAIF,MAAI,yDAER,KAAMG,SAASH,MAAI,0DAE7B,sBAEM,SAAea,EAAgB,GAAD,+BAOpC,8CAPM,WAA+BJ,GAAU,qGAE1BR,EAAAA,EAAAA,IAAc,UAAW,CAAEQ,MAAOA,IAAS,KAAD,EAAnD,OAAHP,EAAG,yBACFA,EAAIF,MAAI,yDAER,KAAMG,SAASH,MAAI,0DAE7B,sBAEM,SAAec,EAAe,GAAD,+BAOnC,8CAPM,WAA8Bd,GAAS,qGAExBC,EAAAA,EAAAA,IAAc,mBAAoBD,GAAM,KAAD,EAAhD,OAAHE,EAAG,yBACFA,EAAIF,MAAI,yDAER,KAAMG,SAASH,MAAI,0DAE7B,sB,qCC7ED,IAAee,EAAAA,EAAAA,OAAa,CAE1BC,QAAQ,+BACRN,QAAS,CACPE,OAAQ,mBACR,eAAgB,qB,kLCCL,SAASJ,IACtB,OAAgCS,EAAAA,EAAAA,UAAS,IAAG,eAArCC,EAAQ,KAAEC,EAAW,KAC5B,GAAoCF,EAAAA,EAAAA,UAAS,IAAG,eAAzCG,EAAU,KAAEC,EAAa,KAE1BC,GAASC,EAAAA,EAAAA,MAcf,OAZAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAqBH,EAAOb,OAAOiB,MAAK,SAACxB,GACvCiB,EAAY,IACZE,EAAc,IACM,IAAhBnB,EAAIyB,QACNR,EAAYjB,EAAI0B,SACS,IAAhB1B,EAAIyB,SACbN,EAAcnB,EAAI0B,QAEtB,GACF,GAAG,KAGD,+BACE,gBAAKC,UAAU,+FAA8F,UAC3G,iBAAKA,UAAU,2CAA0C,WACvD,0BACE,gBACEC,IAAKC,EACLC,IAAI,GACJH,UAAU,gCAGbX,EAASe,OAAS,IACjB,gBAAKJ,UAAU,4DAA2D,SACvEX,IAGJE,EAAWa,OAAS,IACnB,gBAAKJ,UAAU,0DAAyD,SACrET,UAOf,C","sources":["AuthService.tsx","api.tsx","components/VerifyAccount/index.tsx"],"sourcesContent":["import api from \"./api\";\r\n\r\nexport async function Signup(data: any) {\r\n  try {\r\n    const res = await api.post<any>( \"/signup\", data);\r\n    return res.data;\r\n  } catch (error: any) {\r\n    return error.response.data;\r\n  }\r\n}\r\n\r\nexport async function Login(data: any) {\r\n  try {\r\n    const res = await api.post<any>( \"/login\", data);\r\n    return res.data;\r\n  } catch (error: any) {\r\n    return error.response.data;\r\n  }\r\n}\r\n\r\nexport async function ForgotPassword(data: any) {\r\n  try {\r\n    const res = await api.post<any>( \"/forgotpassword\", data);\r\n    return res.data;\r\n  } catch (error: any) {\r\n    return error.response.data;\r\n  }\r\n}\r\n\r\nexport async function CheckForResetPassword(data: any) {\r\n  try {\r\n    const res = await api.post<any>( \"/checkfortoken\", data);\r\n    return res.data;\r\n  } catch (error: any) {\r\n    return error.response.data;\r\n  }\r\n}\r\n\r\nexport async function ResetPassword(data: any) {\r\n  try {\r\n    const res = await api.post<any>( \"/resetpassword\", data);\r\n    return res.data;\r\n  } catch (error: any) {\r\n    return error.response.data;\r\n  }\r\n}\r\n\r\nexport async function VerifyAccount(token: any) {\r\n  try {\r\n    const res = await api.get<any>( \"/verify\", {\r\n      headers: {\r\n        authorization: token,\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    return res.data;\r\n  } catch (error: any) {\r\n    return error.response.data;\r\n  }\r\n}\r\n\r\nexport async function ActivateAccount(token: any) {\r\n  try {\r\n    const res = await api.put<any>( \"/active\", { token: token });\r\n    return res.data;\r\n  } catch (error: any) {\r\n    return error.response.data;\r\n  }\r\n}\r\n\r\nexport async function RegenerateLink(data: any) {\r\n  try {\r\n    const res = await api.put<any>( \"/regeneratetoken\", data);\r\n    return res.data;\r\n  } catch (error: any) {\r\n    return error.response.data;\r\n  }\r\n}\r\n","import axios from \"axios\";\r\nexport default axios.create({\r\n  // baseURL: `http://${process.env.REACT_APP_Host}:${process.env.REACT_APP_Port}`,\r\n  baseURL: `http://localhost:8080/api/v1`,\r\n  headers: {\r\n    Accept: \"application/json\",\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});","import { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport { VerifyAccount as VerifyAccountService } from \"../../AuthService\";\r\n\r\nimport verifyemail from \"../../Images/verifyemail.jpg\";\r\n\r\nexport default function VerifyAccount() {\r\n  const [APIerror, setAPIerror] = useState(\"\");\r\n  const [APIsuccess, setAPIsuccess] = useState(\"\");\r\n\r\n  const params = useParams();\r\n\r\n  useEffect(() => {\r\n    VerifyAccountService(params.token).then((res) => {\r\n      setAPIerror(\"\");\r\n      setAPIsuccess(\"\");\r\n      if (res.success === 0) {\r\n        setAPIerror(res.message);\r\n      } else if (res.success === 1) {\r\n        setAPIsuccess(res.message);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container border w-full mt-4 h-full md:min-h-[400px] lg:min-h-[550px] text-primary bg-light2\">\r\n        <div className=\"w-fit mx-auto flex flex-col items-center\">\r\n          <div>\r\n            <img\r\n              src={verifyemail}\r\n              alt=\"\"\r\n              className=\"h-48 w-48 lg:h-96 lg:w-96\"\r\n            />\r\n          </div>\r\n          {APIerror.length > 0 && (\r\n            <div className=\"text-xl text-secondary  bg-warning rounded py-2 my-2 px-2\">\r\n              {APIerror}\r\n            </div>\r\n          )}\r\n          {APIsuccess.length > 0 && (\r\n            <div className=\"text-xl text-secondary flex bg-success rounded p-2 my-2\">\r\n              {APIsuccess}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"],"names":["Signup","data","api","res","response","Login","ForgotPassword","CheckForResetPassword","ResetPassword","VerifyAccount","token","headers","authorization","Accept","ActivateAccount","RegenerateLink","axios","baseURL","useState","APIerror","setAPIerror","APIsuccess","setAPIsuccess","params","useParams","useEffect","VerifyAccountService","then","success","message","className","src","verifyemail","alt","length"],"sourceRoot":""}